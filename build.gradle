plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.9.6'
    id 'org.gradle.test-retry' version '1.0.0'
}

repositories {
    mavenCentral()
}

def allureVersion = "2.17.3",
    selenideVersion = "6.5.0",
    junitVersion = "5.9.2"

//--------------------------------allure for JUNIT
allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    testImplementation(
            "org.aspectj:aspectjweaver:1.9.19",
            "com.codeborne:selenide:6.15.0",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.assertj:assertj-core:3.19.0",
            "org.slf4j:slf4j-simple:2.0.0",
            'io.rest-assured:rest-assured:4.4.0',
            "org.junit.jupiter:junit-jupiter:$junitVersion")
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties()) //получить проперти (с командной строки)
    useJUnitPlatform() // use junit for task

//--------------------------------------------------------------------------------------->For parallel tests
//    if (System.getProperty("threads") != null && System.getProperty("threads") != 0) {
//        systemProperties += [
//                'junit.jupiter.execution.parallel.enabled'                   : true,
//                'junit.jupiter.execution.parallel.mode.default'              : 'concurrent',
//                'junit.jupiter.execution.parallel.mode.classes.default'      : 'concurrent',
//                'junit.jupiter.execution.parallel.config.strategy'           : 'fixed',
//                'junit.jupiter.execution.parallel.config.fixed.max-pool-size': 5,//<------ System.getProperty("threads").toInteger()
//                'junit.jupiter.execution.parallel.config.fixed.parallelism'  : System.getProperty("threads").toInteger()
//        ]
//    }

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled' : true,
                'junit.jupiter.execution.parallel.mode.default' : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default' : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy' : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.max-pool-size': System.getProperty("threads").toInteger(),
                'junit.jupiter.execution.parallel.config.fixed.parallelism' : System.getProperty("threads").toInteger()
        ]
    }

//--------------------------------------------------------------------------------------->Short logging for tests
    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

test {
    useJUnitPlatform()
    retry{
        maxRetries = 2
        maxFailures = 20
        failOnPassedAfterRetry = true
    }
}

tasks.register('com.easypay.web', Test) {
    useJUnitPlatform {
        includeTags 'com.easypay.web'
    }
    retry{
        maxRetries = 2
        maxFailures = 20
        failOnPassedAfterRetry = true
    }
}
tasks.register('mobile', Test) {
    useJUnitPlatform {
        includeTags 'mobile'
    }
}
tasks.register('com.easypay.api', Test) {
    useJUnitPlatform {
        includeTags 'com.easypay.api'
    }
}

tasks.register('login', Test) {
    useJUnitPlatform {
        includeTags 'login'
    }
    retry{
        maxRetries = 2
        maxFailures = 20
        failOnPassedAfterRetry = true
    }
}